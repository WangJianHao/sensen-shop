server:
  port: 8080

spring:
  application:
    name: sensen-shop-base
  datasource:
    url: jdbc:mysql://localhost:3306/sensen_shop?useUnicode=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai
    username: root
    password: root
  redis:
    host: localhost # Redis服务器地址
    database: 0 # Redis数据库索引（默认为0）
    port: 6379 # Redis服务器连接端口
    password:  # Redis服务器连接密码（默认为空）
    jedis:
      pool:
        max-active: 8 # 连接池最大连接数（使用负值表示没有限制）
        max-wait: -1ms # 连接池最大阻塞等待时间（使用负值表示没有限制）
        max-idle: 8 # 连接池中的最大空闲连接
        min-idle: 0 # 连接池中的最小空闲连接
    timeout: 3000ms # 连接超时时间（毫秒）
  #ES配置
  elasticsearch:
    uris: "http://localhost:9200"
    socket-timeout: "10s"
    username: "elastic"
    password: "O9Dagi50JBdBEo+4DJik"
    restclient:
      sniffer:
        interval: "10m"
        delay-after-failure: "30s"
    webclient:
      max-in-memory-size: "1MB"
  data:
    elasticsearch:
      repositories:
        enabled: true
    mongodb:
      host: localhost
      port: 27017
      password:
      database: sensen-port
  rabbitmq:
    host: localhost # rabbitmq的连接地址
    port: 5672 # rabbitmq的连接端口号
    virtual-host: /sen # rabbitmq的虚拟host
    username: admin # rabbitmq的用户名
    password: admin # rabbitmq的密码
  quartz:
    job-store-type: jdbc # quartz任务存储类型：jdbc或memory
    wait-for-jobs-to-complete-on-shutdown: true # 关闭是等待任务完成
    overwrite-existing-jobs: true # 可以覆盖已有的任务
    properties: # quartz原生配置
      org:
        quartz:
          scheduler:
            instanceName: scheduler # 调度器实例名称
            instanceId: AUTO # 调度器实例ID自动生成
          jobStore:
            class: org.springframework.scheduling.quartz.LocalDataSourceJobStore # 调度信息存储处理类
            driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate # 使用完全兼容JDBC的驱动
            tablePrefix: qrtz_ # quartz相关表前缀
            useProperties: false # 是否将JobDataMap中的属性转为字符串存储
          threadPool:
            class: org.quartz.simpl.SimpleThreadPool # 指定线程池实现类，对调度器提供固定大小的线程池
            threadCount: 10 # 设置并发线程数量
            threadPriority: 5 # 指定线程优先级
  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher #springBoot2.6之后需要设置此项来兼容swagger2

mybatis-plus:
  mapper-locations:
    - classpath:mapper/*.xml

# swagger配置
# 地址：http://localhost:8080/swagger-ui/index.html
swagger:
  enabled: true # true 启用，false 不启用
  title: 'Swagger数据服务接口文档'
  base:
    package: com.sensen.sensenshop.controller
  description: 'Swagger数据服务接口文档'
  url: ''
  version: 1.0

# 自定义redis key
redis:
  key:
    prefix:
      authCode: "portal:authCode:"
    expire:
      authCode: 120 # 验证码超期时间，单位秒
# 自定义jwt key
jwt:
  tokenHeader: Authorization #JWT存储的请求头
  secret: mySecret #JWT加解密使用的密钥
  expiration: 604800 #JWT的超期限时间(60*60*24)
  tokenHead: Bearer  #JWT负载中拿到开头

# 日志配置
logging:
  level:
    org:
      mybatis: DEBUG
      apache:
        ibatis: DEBUG
  config: classpath:logback-spring.xml





